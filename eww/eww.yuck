(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly false
         :spacing 5
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? 'current':''}"
	       :width 30
	       :height 30
	       :hexpand false
	       :valign "center"
	       :halign "center"
	     ""
            )
          )
        )
      )
    )
  )


(defpoll vol :interval "1s" "scripts/getvol")

(defwidget module [?class text icon iheight ?spacing]
  (box :orientation "h"
       :class "module ${class}"
       :space-evenly false
       ;:spacing spacing != 0 ? spacing : 0
       :valign "center"
       :height 30
     (image :path "icon/${icon}.svg"
            :image-height iheight
     )
    (box :class "text" 
	 :height 20
	 :valign "center"
     	text  
    )
  )
)

(defwidget volume []
  (module :class "volume"
          :text "${vol}%"
	  :icon "volume"
	  :iheight 18
	  :spacing 2
  )
)

(deflisten ipaddr :initial "127.0.0.1" "ip addr | grep inet | sed -n '3p' | awk '{print $2}'")
(defwidget network []
  (module :class "network"
          :text "${ipaddr}"
	  :icon "heart"
	  :iheight 25
	  
  )
)


(defwidget speed []
  (module :class "speed"
          :text "${round(EWW_NET.enp5s0.NET_DOWN/10000000,2)}/${round(EWW_NET.enp5s0.NET_UP/10000000,2)}"
	  :icon "Speed"
	  :iheight 18
	  :spacing 3
  )
)


(defwidget cpu []
  (module :class "cpu"
          :text "${round(EWW_CPU.avg, 0)}%"
	  :icon "CPU"
	  :iheight 20
  )
)


(defpoll ram :interval "5s" "scripts/getram")
(defwidget memory []
  (module :class "memory"
          :text "${ram}"
	  :icon "rocket"
	  :iheight 18
  )
)


(defpoll diskrom :interval "5s" "scripts/getdisk")
(defwidget disk []
  (module :class "disk"
          :text "${diskrom}"
	  :icon "icon_disk"
	  :iheight 15
	  :spacing 3
  )
)

(defpoll  temperature-val :interval "5s" "scripts/get-temperature")
(defwidget temperature []
  (module :class "temperature"
          :text "${temperature-val}"
	  :icon "thermometer"
	  :iheight 20
  )
)

(defwidget battery []
  (module :class "battery"
          :text "${EWW_BATTERY}"
	  :icon ""
	  :iheight 23
  )
)


(defpoll time :interval "5s" "date +%H:%M")
(defwidget datetime []
  (module :class "datetime"
          :text "${time}"
	  :icon "clock"
	  :iheight 18
  )
)


(defwidget left-place []
  (box :orientation "h"
       :halign "start"
       :valign "center"
       :space-evenly false
    (network)
    (workspaces)
  )
)

(defwidget mpd []
  (module :class "mpd"
          :text "我与春风皆过客，你携秋水揽星河"
	  :icon "music"
	  :height 30
	  :spacing 3
	  :iheight 20
  )
)

(defwidget center-place []
  (box :orientation "h"
    (mpd)
  )
)

(defwidget right-place []
  (box :orientation "h"
       :halign "end"
       :valign "center"
       :space-evenly false
    (volume)
    (speed)
    (cpu)
    (memory)
    (disk)
    (temperature)
    ;(battery)
    (datetime)
  )
)

(defwidget bar []
  (centerbox :orientation "h"
  	     :valign "center"	
    (left-place)
    (center-place)
    (right-place)
  )
)



(defwindow bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "5px"
                               :width "100%"
                               :height "30px"
                               :anchor "top center")
           :stacking "bottom"
	   :exclusive false
	   :focusable false
  (bar)
)

